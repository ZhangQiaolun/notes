coxph.fit <- coxph(my.surv ~ as.factor(age) + as.factor(drug), method="breslow")
setwd("D:/BA/Homework/HW03")
library(survival)
library(OIsurv)
#head(hmohiv)
#hmohiv$SurvObj <- with(hmohiv, Surv(time, status == 1))
hmohiv <- read.csv("Hmohiv.csv")
attach(hmohiv)
my.surv<-Surv(time, status)
#这里是right censored数据，所以type='right'。
#delta取值为1代表事件发生（例如死亡），取值为0则代表右截值。
my.fit<-survfit(my.surv~1)   #Kaplan-Meier
summary(my.fit)
plot(my.fit)
#比较type=1和type=2这两个组的存活函数
my.fit1<-survfit(Surv(time,status)~drug)
plot(my.fit1)
#检验两个存活函数是否有区别
survdiff(Surv(time, status) ~ drug) # 在5%水平上并没有显著区别。
#计算风险函数
my.surv <- Surv(time, status)
coxph.fit <- coxph(my.surv ~ as.factor(age) + as.factor(drug), method="breslow")
coxph.fit
detach(hmohiv)
coxph.fit <- coxph(my.surv ~ as.factor(age) + as.factor(drug), method="breslow")
data(burn)
View(burn)
coxph.fit <- coxph(my.surv ~ age + as.factor(drug), method="breslow")
coxph.fit
setwd("D:/BA/Homework/HW03")
library(survival)
library(OIsurv)
#head(hmohiv)
#hmohiv$SurvObj <- with(hmohiv, Surv(time, status == 1))
hmohiv <- read.csv("Hmohiv.csv")
attach(hmohiv)
my.surv<-Surv(time, status)
#这里是right censored数据，所以type='right'。
#delta取值为1代表事件发生（例如死亡），取值为0则代表右截值。
my.fit<-survfit(my.surv~1)   #Kaplan-Meier
summary(my.fit)
plot(my.fit)
#比较type=1和type=2这两个组的存活函数
my.fit1<-survfit(Surv(time,status)~drug)
plot(my.fit1)
#检验两个存活函数是否有区别
survdiff(Surv(time, status) ~ drug) # 在5%水平上并没有显著区别。
my.surv <- Surv(time, status)
coxph.fit <- coxph(my.surv ~ age + as.factor(drug), method="breslow")
coxph.fit
detach(hmohiv)
library(party)
str(iris)
ind <- sample(2, nrow(iris), replace=TRUE, prob=c(0.7, 0.3))
trainData <- iris[ind==1,]
testData <- iris[ind==2,]
myFormula <- Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width
iris_ctree <- ctree(myFormula, data=trainData)
table(predict(iris_ctree), trainData$Species)
print(iris_ctree)
plot(iris_ctree)
library(stats) #needed for kmeans
setwd("D:/BA/Homework/HW03")
city <- read.csv("RealEstate.csv")
cityagg=agnes(city,diss=FALSE,metric="euclidian")
plot(cityagg) ## dendrogram
library(party)
View(city)
head(city)
myFormula <- City ~ city.AvgPrice + city.GDP_PC + city.AvgMSalary + city.AvgMNetIncome + city.CPI
city_ctree <- ctree(myFormula, data = city)
myFormula <- City ~ AvgPrice + GDP_PC + AvgMSalary + AvgMNetIncome + CPI
city_ctree <- ctree(myFormula, data = city)
plot(city_ctree, type="simple")
library(TH.data)
library(rpart)
library(rpart.plot) # for the function rpart.plot
library(rattle) # for the function fancyRpartPlot
bodyfat_rpart <- rpart(myFormula, data = city,
control = rpart.control(minsplit = 4))
plot(bodyfat_rpart)
text(bodyfat_rpart, use.n=T)
text(bodyfat_rpart, margin=0.1)
plot(bodyfat_rpart, margin=0.1)
plot(bodyfat_rpart)
text(bodyfat_rpart, use.n=T)
bodyfat_rpart <- rpart(myFormula, data = city,
control = rpart.control(minsplit = 2))
plot(bodyfat_rpart)
text(bodyfat_rpart, use.n=T)
bodyfat_rpart <- rpart(myFormula, data = city,
control = rpart.control(minsplit = 10))
plot(bodyfat_rpart)
text(bodyfat_rpart, use.n=T)
bodyfat_rpart <- rpart(myFormula, data = city,
control = rpart.control(minsplit = 2))
plot(bodyfat_rpart)
text(bodyfat_rpart, use.n=T)
library(stats) #needed for kmeans
setwd("D:/BA/Homework/HW03")
city <- read.csv("RealEstate.csv")
cityagg=agnes(city,diss=FALSE,metric="euclidian")
plot(cityagg) ## dendrogram
library(party)
myFormula <- City ~ AvgPrice + GDP_PC + AvgMSalary + AvgMNetIncome + CPI
library(TH.data)
library(rpart)
cityagg=agnes(city,diss=FALSE,metric="euclidian")
library(stats) #needed for kmeans
setwd("D:/BA/Homework/HW03")
city <- read.csv("RealEstate.csv")
cityagg=agnes(city,diss=FALSE,metric="euclidian")
library(cluster) #needed for hierachical clustering
setwd("D:/BA/Clustering")
food <- read.csv("protein.csv")
foodagg=agnes(food,diss=FALSE,metric="euclidian")
plot(foodagg) ## dendrogram
library(party)
cityagg=agnes(city,diss=FALSE,metric="euclidian")
plot(cityagg) ## dendrogram
library(party)
myFormula <- City ~ AvgPrice + GDP_PC + AvgMSalary + AvgMNetIncome + CPI
library(TH.data)
library(rpart)
library(rpart.plot) # for the function rpart.plot
library(rattle) # for the function fancyRpartPlot
bodyfat_rpart <- rpart(myFormula, data = city,
control = rpart.control(minsplit = 2))
plot(bodyfat_rpart)
text(bodyfat_rpart, use.n=T)
setwd("D:/BA/Homework/HW03")
library(party)
market <- read.csv("Segmentation.csv")
library(rpart)
library(rpart.plot) # for the function rpart.plot
library(rattle) # for the function fancyRpartPlot
market_rpart <- rpart(Class ~ . , data = market,
control = rpart.control(minsplit = 100))
plot(market_rpart)
text(market_rpart, use.n=T)
text(market_rpart)
plot(market_rpart,margin=0.1)
text(market_rpart)
setwd("D:/BA/Homework/HW03")
mydata <- read.csv("NN.csv")
set.seed(1)
ind <- sample(2, nrow(mydata), replace=TRUE, prob=c(0.7, 0.3))
trainset <- mydata[ind==1,]
testset <- mydata[ind==2,]
## build the neural network (NN)
creditnet <- neuralnet(y ~ x.1 + x.2, trainset, hidden = 3, lifesign = 'minimal',
linear.output = FALSE, threshold = 0.01)
#模型：输入层有LTI和age，输出层是default10yr，隐藏层有4个节点，lifesign可选择的参数
#有'minimal'、'full'和'none' 表示运行过程中信息输出的丰富程度。
#linear.output表示是否对输出层进行默认的使用logistic函数进行非线性处理。
#如果选择TRUE则直接输出隐藏层的加权和。如果选择FALSE还要对加权和做logistic函数处理。
#threshold 表示错误对权重的偏导数到达什么时候停止。这里选择0.1，默认是0.01。
## plot the NN
plot(creditnet, rep = "best")
## test the resulting output
temp_test <- subset(testset, select = c("x.1", "x.2"))
creditnet.results <- compute(creditnet, temp_test)
results <- data.frame(actual = testset$y, prediction = creditnet.results$net.result)
#results[100:115, ]
results$prediction <- round(results$prediction)
#results[100:115, ]
table(results)
## the second
set.seed(1)
ind <- sample(2, nrow(mydata), replace=TRUE, prob=c(0.7, 0.3))
trainset <- mydata[ind==1,]
testset <- mydata[ind==2,]
## build the neural network (NN)
creditnet <- neuralnet(y ~ x.1 + x.2, trainset, hidden = 2, lifesign = 'minimal',
linear.output = FALSE, threshold = 0.01)
#模型：输入层有LTI和age，输出层是default10yr，隐藏层有4个节点，lifesign可选择的参数
#有'minimal'、'full'和'none' 表示运行过程中信息输出的丰富程度。
#linear.output表示是否对输出层进行默认的使用logistic函数进行非线性处理。
#如果选择TRUE则直接输出隐藏层的加权和。如果选择FALSE还要对加权和做logistic函数处理。
#threshold 表示错误对权重的偏导数到达什么时候停止。这里选择0.1，默认是0.01。
## plot the NN
plot(creditnet, rep = "best")
## test the resulting output
temp_test <- subset(testset, select = c("x.1", "x.2"))
creditnet.results <- compute(creditnet, temp_test)
results <- data.frame(actual = testset$y, prediction = creditnet.results$net.result)
#results[100:115, ]
results$prediction <- round(results$prediction)
#results[100:115, ]
table(results)
setwd("D:/BA/Homework/HW03")
library(arules) ## needed for Association Rules Mining
cosmetics <- read.csv("Cosmetics.csv",header = TRUE, rownames = TRUE)
data = cosmetics[, -1]
head(data)
rules <- apriori(data, parameter = list(maxlen=20, supp=0.1, conf=0.5),
appearance = list(lhs=c("Nail.Polish=yes"), default="rhs"),
control = list(verbose=F))
inspect(rules)
rules <- apriori(data, parameter = list(maxlen=20, supp=0.1, conf=0.5),
appearance = list(lhs=c("Mascara=yes"), default="rhs"),
control = list(verbose=F))
inspect(rules)
setwd("D:/BA/Homework/HW03")
library(arules) ## needed for Association Rules Mining
cosmetics <- read.csv("Cosmetics.csv",header = TRUE, rownames = TRUE)
setwd("D:/BA/Homework/HW03")
library(fpp)
data(euretail)
head(euretail)
plot(euretail, ylab="Retain Index", xlab="Year", main="Quarterly Retail Trade Index in The Euro Area", cex = 0.5)
fit <- decompose(euretail, type="multiplicative")
plot(fit)
fit <- decompose(euretail, type="additive")
plot(fit)
#Holt-Winters Smoothing Methods
#aust <- window(austourists,start=2005)
fit2 <- hw(euretail,seasonal="multiplicative")
plot(fit2,ylab="Quarterly Retail Trade Index in The Euro Area",
plot.conf=FALSE, type="o", fcol="white", xlab="Year")
lines(fitted(fit1), col="red", lty=2)
lines(fitted(fit2), col="green", lty=2)
lines(fit1$mean, type="o", col="red")
lines(fit2$mean, type="o", col="green")
legend("topleft",lty=1, pch=1, col=1:3, cex = 0.5,
c("data","Holt Winters' Additive","Holt Winters' Multiplicative"))
setwd("D:/BA/Homework/HW03")
library(survival)
library(OIsurv)
#head(hmohiv)
#hmohiv$SurvObj <- with(hmohiv, Surv(time, status == 1))
hmohiv <- read.csv("Hmohiv.csv")
attach(hmohiv)
my.surv<-Surv(time, status)
#这里是right censored数据，所以type='right'。
#delta取值为1代表事件发生（例如死亡），取值为0则代表右截值。
my.fit<-survfit(my.surv~1)   #Kaplan-Meier
summary(my.fit)
plot(my.fit)
#比较type=1和type=2这两个组的存活函数
my.fit1<-survfit(Surv(time,status)~drug)
plot(my.fit1)
#检验两个存活函数是否有区别
survdiff(Surv(time, status) ~ drug) # 在5%水平上并没有显著区别。
#第三小问
my.surv <- Surv(time, status)
coxph.fit <- coxph(my.surv ~ age + as.factor(drug), method="breslow")
coxph.fit
detach(hmohiv)
setwd("D:/BA/Homework/HW03")
mydata <- read.csv("NN.csv")
set.seed(1)
ind <- sample(2, nrow(mydata), replace=TRUE, prob=c(0.7, 0.3))
trainset <- mydata[ind==1,]
testset <- mydata[ind==2,]
creditnet <- neuralnet(y ~ x.1 + x.2, trainset, hidden = 3, lifesign = 'minimal',
linear.output = FALSE, threshold = 0.01)
setwd("D:/BA/Homework/HW03")
library("neuralnet")
mydata <- read.csv("NN.csv")
set.seed(1)
ind <- sample(2, nrow(mydata), replace=TRUE, prob=c(0.7, 0.3))
trainset <- mydata[ind==1,]
testset <- mydata[ind==2,]
## build the neural network (NN)
creditnet <- neuralnet(y ~ x.1 + x.2, trainset, hidden = 3, lifesign = 'minimal',
linear.output = FALSE, threshold = 0.01)
#模型：输入层有LTI和age，输出层是default10yr，隐藏层有4个节点，lifesign可选择的参数
#有'minimal'、'full'和'none' 表示运行过程中信息输出的丰富程度。
#linear.output表示是否对输出层进行默认的使用logistic函数进行非线性处理。
#如果选择TRUE则直接输出隐藏层的加权和。如果选择FALSE还要对加权和做logistic函数处理。
#threshold 表示错误对权重的偏导数到达什么时候停止。这里选择0.1，默认是0.01。
## plot the NN
plot(creditnet, rep = "best")
## test the resulting output
temp_test <- subset(testset, select = c("x.1", "x.2"))
creditnet.results <- compute(creditnet, temp_test)
results <- data.frame(actual = testset$y, prediction = creditnet.results$net.result)
#results[100:115, ]
results$prediction <- round(results$prediction)
#results[100:115, ]
table(results)
## the second
set.seed(1)
ind <- sample(2, nrow(mydata), replace=TRUE, prob=c(0.7, 0.3))
trainset <- mydata[ind==1,]
testset <- mydata[ind==2,]
## build the neural network (NN)
creditnet <- neuralnet(y ~ x.1 + x.2, trainset, hidden = 2, lifesign = 'minimal',
linear.output = FALSE, threshold = 0.01)
#模型：输入层有LTI和age，输出层是default10yr，隐藏层有4个节点，lifesign可选择的参数
#有'minimal'、'full'和'none' 表示运行过程中信息输出的丰富程度。
#linear.output表示是否对输出层进行默认的使用logistic函数进行非线性处理。
#如果选择TRUE则直接输出隐藏层的加权和。如果选择FALSE还要对加权和做logistic函数处理。
#threshold 表示错误对权重的偏导数到达什么时候停止。这里选择0.1，默认是0.01。
## plot the NN
plot(creditnet, rep = "best")
## test the resulting output
temp_test <- subset(testset, select = c("x.1", "x.2"))
creditnet.results <- compute(creditnet, temp_test)
results <- data.frame(actual = testset$y, prediction = creditnet.results$net.result)
#results[100:115, ]
results$prediction <- round(results$prediction)
#results[100:115, ]
table(results)
setwd("D:/BA/Homework/HW03")
library(arules) ## needed for Association Rules Mining
cosmetics <- read.csv("Cosmetics.csv",header = TRUE, rownames = TRUE)
cosmetics <- read.csv("Cosmetics.csv",header = TRUE)
data = cosmetics[, -1]
head(data)
rules <- apriori(data, parameter = list(maxlen=20, supp=0.1, conf=0.5),
appearance = list(lhs=c("Nail.Polish=yes"), default="rhs"),
control = list(verbose=F))
inspect(rules)
rules <- apriori(data, parameter = list(maxlen=20, supp=0.1, conf=0.5),
appearance = list(lhs=c("Mascara=yes"), default="rhs"),
control = list(verbose=F))
inspect(rules)
setwd("D:/BA/Homework/HW03")
library(arules) ## needed for Association Rules Mining
cosmetics <- read.csv("Cosmetics.csv",header = TRUE)
data = cosmetics[, -1]
head(data)
rules <- apriori(data, parameter = list(maxlen=20, supp=0.1, conf=0.5),
appearance = list(lhs=c("Nail.Polish=yes"), default="rhs"),
control = list(verbose=F))
inspect(rules)
rules <- apriori(data, parameter = list(maxlen=20, supp=0.1, conf=0.5),
appearance = list(lhs=c("Mascara=yes"), default="rhs"),
control = list(verbose=F))
inspect(rules)
setwd("D:/BA/Homework/HW03")
library(fpp)
data(euretail)
head(euretail)
plot(euretail, ylab="Retain Index", xlab="Year", main="Quarterly Retail Trade Index in The Euro Area", cex = 0.5)
fit <- decompose(euretail, type="multiplicative")
plot(fit)
fit <- decompose(euretail, type="additive")
plot(fit)
#Holt-Winters Smoothing Methods
#aust <- window(austourists,start=2005)
fit2 <- hw(euretail,seasonal="multiplicative")
plot(fit2,ylab="Quarterly Retail Trade Index in The Euro Area",
plot.conf=FALSE, type="o", fcol="white", xlab="Year")
#lines(fitted(fit1), col="red", lty=2)
lines(fitted(fit2), col="green", lty=2)
#lines(fit1$mean, type="o", col="red")
lines(fit2$mean, type="o", col="green")
legend("topleft",lty=1, pch=1, col=1:3, cex = 0.5,
c("data","Holt Winters' Additive","Holt Winters' Multiplicative"))
setwd("D:/BA/Homework/HW03")
library(fpp)
data(euretail)
head(euretail)
plot(euretail, ylab="Retain Index", xlab="Year", main="Quarterly Retail Trade Index in The Euro Area", cex = 0.5)
fit <- decompose(euretail, type="multiplicative")
plot(fit)
fit <- decompose(euretail, type="additive")
plot(fit)
#Holt-Winters Smoothing Methods
#aust <- window(austourists,start=2005)
fit2 <- hw(euretail,seasonal="multiplicative")
plot(fit2,ylab="Quarterly Retail Trade Index in The Euro Area",
plot.conf=FALSE, type="o", fcol="white", xlab="Year")
#lines(fitted(fit1), col="red", lty=2)
lines(fitted(fit2), col="green", lty=2)
#lines(fit1$mean, type="o", col="red")
lines(fit2$mean, type="o", col="green")
legend("topleft",lty=1, pch=1, col=1:3, cex = 0.5,
c("data","Holt Winters' Additive","Holt Winters' Multiplicative"))
library(stats) #needed for kmeans
setwd("D:/BA/Homework/HW03")
## read in the data
city <- read.csv("RealEstate.csv")
cityagg=agnes(city,diss=FALSE,metric="euclidian")
plot(cityagg) ## dendrogram
library(party)
myFormula <- City ~ AvgPrice + GDP_PC + AvgMSalary + AvgMNetIncome + CPI
#city_ctree <- ctree(myFormula, data = city)
library(TH.data)
library(rpart)
library(rpart.plot) # for the function rpart.plot
library(rattle) # for the function fancyRpartPlot
# train a decision tree
bodyfat_rpart <- rpart(myFormula, data = city,
control = rpart.control(minsplit = 2))
plot(bodyfat_rpart)
text(bodyfat_rpart, use.n=T)
setwd("D:/BA/Homework/HW03")
library(party)
market <- read.csv("Segmentation.csv")
#其实就是挑出数据
#iris_ctree <- ctree(Class ~ ., data=market)
# check the prediction
#plot(iris_ctree)
#plot(iris_ctree, type="simple")
library(rpart)
library(rpart.plot) # for the function rpart.plot
library(rattle) # for the function fancyRpartPlot
market_rpart <- rpart(Class ~ . , data = market,
control = rpart.control(minsplit = 100))
#minsplit: the minimum number of observations that must exist in a node in order for a split to be attempted.
plot(market_rpart)
text(market_rpart, use.n=T)
plot(market_rpart,margin=0.1)
text(market_rpart)
setwd("D:/BA/Homework/HW03")
library("neuralnet")
mydata <- read.csv("NN.csv")
set.seed(1)
ind <- sample(2, nrow(mydata), replace=TRUE, prob=c(0.7, 0.3))
trainset <- mydata[ind==1,]
testset <- mydata[ind==2,]
## build the neural network (NN)
creditnet <- neuralnet(y ~ x.1 + x.2, trainset, hidden = 3, lifesign = 'minimal',
linear.output = FALSE, threshold = 0.01)
#模型：输入层有LTI和age，输出层是default10yr，隐藏层有4个节点，lifesign可选择的参数
#有'minimal'、'full'和'none' 表示运行过程中信息输出的丰富程度。
#linear.output表示是否对输出层进行默认的使用logistic函数进行非线性处理。
#如果选择TRUE则直接输出隐藏层的加权和。如果选择FALSE还要对加权和做logistic函数处理。
#threshold 表示错误对权重的偏导数到达什么时候停止。这里选择0.1，默认是0.01。
## plot the NN
plot(creditnet, rep = "best")
## test the resulting output
temp_test <- subset(testset, select = c("x.1", "x.2"))
creditnet.results <- compute(creditnet, temp_test)
results <- data.frame(actual = testset$y, prediction = creditnet.results$net.result)
#results[100:115, ]
results$prediction <- round(results$prediction)
#results[100:115, ]
table(results)
## the second
set.seed(1)
ind <- sample(2, nrow(mydata), replace=TRUE, prob=c(0.7, 0.3))
trainset <- mydata[ind==1,]
testset <- mydata[ind==2,]
## build the neural network (NN)
creditnet <- neuralnet(y ~ x.1 + x.2, trainset, hidden = 2, lifesign = 'minimal',
linear.output = FALSE, threshold = 0.01)
#模型：输入层有LTI和age，输出层是default10yr，隐藏层有4个节点，lifesign可选择的参数
#有'minimal'、'full'和'none' 表示运行过程中信息输出的丰富程度。
#linear.output表示是否对输出层进行默认的使用logistic函数进行非线性处理。
#如果选择TRUE则直接输出隐藏层的加权和。如果选择FALSE还要对加权和做logistic函数处理。
#threshold 表示错误对权重的偏导数到达什么时候停止。这里选择0.1，默认是0.01。
## plot the NN
plot(creditnet, rep = "best")
## test the resulting output
temp_test <- subset(testset, select = c("x.1", "x.2"))
creditnet.results <- compute(creditnet, temp_test)
results <- data.frame(actual = testset$y, prediction = creditnet.results$net.result)
#results[100:115, ]
results$prediction <- round(results$prediction)
#results[100:115, ]
table(results)
setwd("D:/BA/Homework/HW03")
library(arules) ## needed for Association Rules Mining
cosmetics <- read.csv("Cosmetics.csv",header = TRUE)
data = cosmetics[, -1]
head(data)
rules <- apriori(data, parameter = list(maxlen=20, supp=0.1, conf=0.5),
appearance = list(lhs=c("Nail.Polish=yes"), default="rhs"),
control = list(verbose=F))
inspect(rules)
rules <- apriori(data, parameter = list(maxlen=20, supp=0.1, conf=0.5),
appearance = list(lhs=c("Mascara=yes"), default="rhs"),
control = list(verbose=F))
inspect(rules)
setwd("D:/BA/Homework/HW03")
library(fpp)
data(euretail)
head(euretail)
plot(euretail, ylab="Retain Index", xlab="Year", main="Quarterly Retail Trade Index in The Euro Area", cex = 0.5)
fit <- decompose(euretail, type="multiplicative")
plot(fit)
fit <- decompose(euretail, type="additive")
plot(fit)
#Holt-Winters Smoothing Methods
#aust <- window(austourists,start=2005)
fit2 <- hw(euretail,seasonal="multiplicative")
plot(fit2,ylab="Quarterly Retail Trade Index in The Euro Area",
plot.conf=FALSE, type="o", fcol="white", xlab="Year")
#lines(fitted(fit1), col="red", lty=2)
lines(fitted(fit2), col="green", lty=2)
#lines(fit1$mean, type="o", col="red")
lines(fit2$mean, type="o", col="green")
legend("topleft",lty=1, pch=1, col=1:3, cex = 0.5,
c("data","Holt Winters' Additive","Holt Winters' Multiplicative"))
setwd("D:/BA/Homework/HW03")
library(survival)
library(OIsurv)
#head(hmohiv)
#hmohiv$SurvObj <- with(hmohiv, Surv(time, status == 1))
hmohiv <- read.csv("Hmohiv.csv")
attach(hmohiv)
my.surv<-Surv(time, status)
#这里是right censored数据，所以type='right'。
#delta取值为1代表事件发生（例如死亡），取值为0则代表右截值。
my.fit<-survfit(my.surv~1)   #Kaplan-Meier
summary(my.fit)
plot(my.fit)
#比较type=1和type=2这两个组的存活函数
my.fit1<-survfit(Surv(time,status)~drug)
plot(my.fit1)
#检验两个存活函数是否有区别
survdiff(Surv(time, status) ~ drug) # 在5%水平上并没有显著区别。
#第三小问
my.surv <- Surv(time, status)
coxph.fit <- coxph(my.surv ~ age + as.factor(drug), method="breslow")
coxph.fit
detach(hmohiv)
